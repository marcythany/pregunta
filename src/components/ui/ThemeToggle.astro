---
// ThemeToggle.astro
---

<button
  id="theme-toggle"
  type="button"
  class="inline-flex items-center justify-center rounded-lg p-2.5 text-light-text-primary hover:bg-light-primary/10 dark:text-dark-text-primary dark:hover:bg-dark-primary/10 focus:outline-none focus:ring-2 focus:ring-light-primary dark:focus:ring-dark-primary"
  aria-label="Toggle theme"
  data-theme-toggle
>
  <!-- Sun icon -->
  <svg
    id="theme-toggle-light-icon"
    class="h-5 w-5 hidden dark:block"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    />
  </svg>
  <!-- Moon icon -->
  <svg
    id="theme-toggle-dark-icon"
    class="h-5 w-5 block dark:hidden"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    />
  </svg>
</button>

<script>
  const themeToggle = document.getElementById('theme-toggle');
  const lightIcon = document.getElementById('theme-toggle-light-icon');
  const darkIcon = document.getElementById('theme-toggle-dark-icon');

  // Função para atualizar os ícones baseado no tema atual
  function updateIcons(isDark) {
    if (isDark) {
      lightIcon.classList.remove('hidden');
      darkIcon.classList.add('hidden');
    } else {
      lightIcon.classList.add('hidden');
      darkIcon.classList.remove('hidden');
    }
  }

  // Atualiza os ícones inicialmente
  updateIcons(document.documentElement.classList.contains('dark'));

  // Adiciona o evento de clique
  themeToggle.addEventListener('click', () => {
    const isDark = document.documentElement.classList.toggle('dark');
    localStorage.theme = isDark ? 'dark' : 'light';
    updateIcons(isDark);

    // Dispara um evento customizado para notificar outras partes da aplicação
    window.dispatchEvent(new CustomEvent('theme-changed', { detail: { theme: isDark ? 'dark' : 'light' } }));
  });

  // Observa mudanças no mediaQuery do sistema
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!('theme' in localStorage)) {
      const isDark = e.matches;
      document.documentElement.classList.toggle('dark', isDark);
      updateIcons(isDark);
    }
  });

  // Atualiza os ícones quando a página é carregada via View Transitions
  document.addEventListener('astro:after-swap', () => {
    updateIcons(document.documentElement.classList.contains('dark'));
  });
</script>