---
import Layout from '../../layouts/Layout.astro';
import { QuestionCard } from '../../components/ui/QuestionCard';
import { CreateQuestionButton } from '../../components/ui/CreateQuestionButton';
import { UserMenu } from '../../components/ui/UserMenu';
import { AuthModal } from '../../components/ui/AuthModal';
import { getRelativeLocaleUrl } from 'astro:i18n';

// Fetch questions from server
const response = await fetch(`${import.meta.env.PUBLIC_API_URL || ''}/api/questions`);
const { questions = [], pagination } = await response.json();

const playURL = getRelativeLocaleUrl('en', 'play');
const aboutURL = getRelativeLocaleUrl('en', 'about');
---

<Layout title="Pregunta - Your Q&A Platform">
  <main class="container mx-auto px-4 py-8">
    <!-- Header with navigation and user menu -->
    <header class="flex justify-between items-center mb-8">
      <nav class="flex space-x-4">
        <a href="#" class="text-gray-600 hover:text-gray-900">Recent</a>
        <a href="#" class="text-gray-600 hover:text-gray-900">Most Voted</a>
        <a href="#" class="text-gray-600 hover:text-gray-900">Unanswered</a>
      </nav>
      
      <UserMenu client:load />
    </header>

    <!-- Filters and Search -->
    <div class="mb-8">
      <div class="flex gap-4 mb-4">
        <input
          type="text"
          placeholder="Search questions..."
          class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
        <select class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
          <option value="">All categories</option>
          <option value="technology">Technology</option>
          <option value="science">Science</option>
          <option value="history">History</option>
        </select>
      </div>
    </div>

    <!-- Questions List -->
    <div class="space-y-6">
      {questions.map((question) => (
        <QuestionCard question={question} client:load />
      ))}
    </div>

    <!-- Pagination -->
    {pagination?.totalPages > 1 && (
      <div class="flex justify-center mt-8">
        <nav class="inline-flex rounded-md shadow">
          <a
            href={`?page=${Math.max(1, pagination.page - 1)}`}
            class={`px-3 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
              pagination.page <= 1 ? 'text-gray-300' : 'text-gray-700 hover:bg-gray-50'
            }`}
          >
            Previous
          </a>
          {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map((pageNum) => (
            <a
              href={`?page=${pageNum}`}
              class={`px-3 py-2 border border-gray-300 text-sm font-medium ${
                pageNum === pagination.page
                  ? 'bg-indigo-50 text-indigo-600'
                  : 'bg-white text-gray-700 hover:bg-gray-50'
              }`}
            >
              {pageNum}
            </a>
          ))}
          <a
            href={`?page=${Math.min(pagination.totalPages, pagination.page + 1)}`}
            class={`px-3 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
              pagination.page >= pagination.totalPages ? 'text-gray-300' : 'text-gray-700 hover:bg-gray-50'
            }`}
          >
            Next
          </a>
        </nav>
      </div>
    )}

    <!-- Create Question Button -->
    <CreateQuestionButton client:load />

    <!-- Auth Modal -->
    <AuthModal client:load isOpen={false} onClose={() => {}} />
  </main>
</Layout>

<script>
  // Initialize application state
  import { userStore, setUser, setToken, setPoints, setPermissions } from '../../stores/authStore';
  
  // Retrieve token from localStorage
  const token = localStorage.getItem('token');
  if (token) {
    try {
      const response = await fetch('/api/auth/me', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const userData = await response.json();
        setToken(token);
        setUser(userData);
        setPoints(userData.points || 0);
        setPermissions(userData.permissions || []);
      } else {
        localStorage.removeItem('token');
      }
    } catch (err) {
      console.error('Error retrieving user data:', err.message);
      localStorage.removeItem('token');
    }
  }
</script>
